# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pid_controller
else:
    import _pid_controller

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class MotorPower_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m1 = property(_pid_controller.MotorPower_t_m1_get, _pid_controller.MotorPower_t_m1_set)
    m2 = property(_pid_controller.MotorPower_t_m2_get, _pid_controller.MotorPower_t_m2_set)
    m3 = property(_pid_controller.MotorPower_t_m3_get, _pid_controller.MotorPower_t_m3_set)
    m4 = property(_pid_controller.MotorPower_t_m4_get, _pid_controller.MotorPower_t_m4_set)

    def __init__(self):
        _pid_controller.MotorPower_t_swiginit(self, _pid_controller.new_MotorPower_t())
    __swig_destroy__ = _pid_controller.delete_MotorPower_t

# Register MotorPower_t in _pid_controller:
_pid_controller.MotorPower_t_swigregister(MotorPower_t)

class DesiredState_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    roll = property(_pid_controller.DesiredState_t_roll_get, _pid_controller.DesiredState_t_roll_set)
    pitch = property(_pid_controller.DesiredState_t_pitch_get, _pid_controller.DesiredState_t_pitch_set)
    yaw_rate = property(_pid_controller.DesiredState_t_yaw_rate_get, _pid_controller.DesiredState_t_yaw_rate_set)
    altitude = property(_pid_controller.DesiredState_t_altitude_get, _pid_controller.DesiredState_t_altitude_set)
    vx = property(_pid_controller.DesiredState_t_vx_get, _pid_controller.DesiredState_t_vx_set)
    vy = property(_pid_controller.DesiredState_t_vy_get, _pid_controller.DesiredState_t_vy_set)

    def __init__(self):
        _pid_controller.DesiredState_t_swiginit(self, _pid_controller.new_DesiredState_t())
    __swig_destroy__ = _pid_controller.delete_DesiredState_t

# Register DesiredState_t in _pid_controller:
_pid_controller.DesiredState_t_swigregister(DesiredState_t)

class ActualState_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    roll = property(_pid_controller.ActualState_t_roll_get, _pid_controller.ActualState_t_roll_set)
    pitch = property(_pid_controller.ActualState_t_pitch_get, _pid_controller.ActualState_t_pitch_set)
    yaw_rate = property(_pid_controller.ActualState_t_yaw_rate_get, _pid_controller.ActualState_t_yaw_rate_set)
    altitude = property(_pid_controller.ActualState_t_altitude_get, _pid_controller.ActualState_t_altitude_set)
    vx = property(_pid_controller.ActualState_t_vx_get, _pid_controller.ActualState_t_vx_set)
    vy = property(_pid_controller.ActualState_t_vy_get, _pid_controller.ActualState_t_vy_set)

    def __init__(self):
        _pid_controller.ActualState_t_swiginit(self, _pid_controller.new_ActualState_t())
    __swig_destroy__ = _pid_controller.delete_ActualState_t

# Register ActualState_t in _pid_controller:
_pid_controller.ActualState_t_swigregister(ActualState_t)

class GainsPID_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kp_att_rp = property(_pid_controller.GainsPID_t_kp_att_rp_get, _pid_controller.GainsPID_t_kp_att_rp_set)
    kd_att_rp = property(_pid_controller.GainsPID_t_kd_att_rp_get, _pid_controller.GainsPID_t_kd_att_rp_set)
    kp_att_y = property(_pid_controller.GainsPID_t_kp_att_y_get, _pid_controller.GainsPID_t_kp_att_y_set)
    kd_att_y = property(_pid_controller.GainsPID_t_kd_att_y_get, _pid_controller.GainsPID_t_kd_att_y_set)
    kp_vel_xy = property(_pid_controller.GainsPID_t_kp_vel_xy_get, _pid_controller.GainsPID_t_kp_vel_xy_set)
    kd_vel_xy = property(_pid_controller.GainsPID_t_kd_vel_xy_get, _pid_controller.GainsPID_t_kd_vel_xy_set)
    kp_z = property(_pid_controller.GainsPID_t_kp_z_get, _pid_controller.GainsPID_t_kp_z_set)
    kd_z = property(_pid_controller.GainsPID_t_kd_z_get, _pid_controller.GainsPID_t_kd_z_set)
    ki_z = property(_pid_controller.GainsPID_t_ki_z_get, _pid_controller.GainsPID_t_ki_z_set)

    def __init__(self):
        _pid_controller.GainsPID_t_swiginit(self, _pid_controller.new_GainsPID_t())
    __swig_destroy__ = _pid_controller.delete_GainsPID_t

# Register GainsPID_t in _pid_controller:
_pid_controller.GainsPID_t_swigregister(GainsPID_t)


def init_pid_attitude_fixed_height_controller():
    return _pid_controller.init_pid_attitude_fixed_height_controller()

def pid_attitude_fixed_height_controller(actualState, desiredState, gainsPID, dt, motorCommands):
    return _pid_controller.pid_attitude_fixed_height_controller(actualState, desiredState, gainsPID, dt, motorCommands)

def pid_velocity_fixed_height_controller(actualState, desiredState, gainsPID, dt, motorCommands):
    return _pid_controller.pid_velocity_fixed_height_controller(actualState, desiredState, gainsPID, dt, motorCommands)


